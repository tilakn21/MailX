---
description: Guidelines for implementing GET API routes in Next.js
globs: 
alwaysApply: false
---
# GET API Route Guidelines

Guidelines for implementing GET API routes in Next.js App Router:

Basic Structure. Note how we auto generate the response type for use on the client:

```typescript
import { NextResponse } from "next/server";
import { auth } from "@/app/api/auth/[...nextauth]/auth";
import prisma from "@/utils/prisma";
import { withError } from "@/utils/middleware";

export type GetExampleResponse = Awaited<ReturnType<typeof getData>>;

export const GET = withError(async () => {
  const session = await auth();
  if (!session?.user.id)
    return NextResponse.json({ error: "Not authenticated" }, { status: 401 });

  const result = getData(session.user.id);
  return NextResponse.json(result);
});

async function getData(userId: string) {
  const items = await prisma.example.findMany({
    where: {
      userId: session.user.id,
    },
    orderBy: {
      updatedAt: "desc",
    },
  });

  return { items };
}
```

See [data-fetching.mdc](mdc:.cursor/rules/data-fetching.mdc) as to how this would be then used on the client.

Key Requirements:

   - Always wrap the handler with `withError` for consistent error handling. We don't need try/catch
   - Always check authentication using `auth()`
   - Infer and export response type
   - Use Prisma for database queries. See [prisma.mdc](mdc:.cursor/rules/prisma.mdc)
   - Return responses using `NextResponse.json()`
